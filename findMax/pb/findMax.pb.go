// Code generated by protoc-gen-go. DO NOT EDIT.
// source: findMax.proto

package findMax

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindMaxResponse struct {
	Max                  int32    `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaxResponse) Reset()         { *m = FindMaxResponse{} }
func (m *FindMaxResponse) String() string { return proto.CompactTextString(m) }
func (*FindMaxResponse) ProtoMessage()    {}
func (*FindMaxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03f5855fe4905454, []int{0}
}

func (m *FindMaxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaxResponse.Unmarshal(m, b)
}
func (m *FindMaxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaxResponse.Marshal(b, m, deterministic)
}
func (m *FindMaxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaxResponse.Merge(m, src)
}
func (m *FindMaxResponse) XXX_Size() int {
	return xxx_messageInfo_FindMaxResponse.Size(m)
}
func (m *FindMaxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaxResponse proto.InternalMessageInfo

func (m *FindMaxResponse) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type FindMaxRequest struct {
	Val                  int32    `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaxRequest) Reset()         { *m = FindMaxRequest{} }
func (m *FindMaxRequest) String() string { return proto.CompactTextString(m) }
func (*FindMaxRequest) ProtoMessage()    {}
func (*FindMaxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03f5855fe4905454, []int{1}
}

func (m *FindMaxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaxRequest.Unmarshal(m, b)
}
func (m *FindMaxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaxRequest.Marshal(b, m, deterministic)
}
func (m *FindMaxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaxRequest.Merge(m, src)
}
func (m *FindMaxRequest) XXX_Size() int {
	return xxx_messageInfo_FindMaxRequest.Size(m)
}
func (m *FindMaxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaxRequest proto.InternalMessageInfo

func (m *FindMaxRequest) GetVal() int32 {
	if m != nil {
		return m.Val
	}
	return 0
}

func init() {
	proto.RegisterType((*FindMaxResponse)(nil), "findMax.FindMaxResponse")
	proto.RegisterType((*FindMaxRequest)(nil), "findMax.FindMaxRequest")
}

func init() { proto.RegisterFile("findMax.proto", fileDescriptor_03f5855fe4905454) }

var fileDescriptor_03f5855fe4905454 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xcb, 0xcc, 0x4b,
	0xf1, 0x4d, 0xac, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb9,
	0xf8, 0xdd, 0x20, 0xcc, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x01, 0x2e, 0xe6,
	0xdc, 0xc4, 0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x10, 0x53, 0x49, 0x89, 0x8b, 0x0f,
	0xae, 0xa8, 0xb0, 0x34, 0xb5, 0xb8, 0x04, 0xa4, 0xa6, 0x2c, 0x31, 0x07, 0xa6, 0xa6, 0x2c, 0x31,
	0xc7, 0x28, 0x1c, 0xae, 0x26, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x95, 0x8b, 0xcb,
	0x39, 0x3f, 0xb7, 0xa0, 0xb4, 0x24, 0xd5, 0x37, 0xb1, 0x42, 0x48, 0x5c, 0x0f, 0xe6, 0x02, 0x54,
	0xa3, 0xa4, 0x24, 0x30, 0x25, 0x20, 0x0e, 0x51, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x74, 0xe2, 0x8c,
	0x82, 0x39, 0x36, 0x89, 0x0d, 0xec, 0x78, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x28,
	0x84, 0x6e, 0xcd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FindMaxServiceClient is the client API for FindMaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FindMaxServiceClient interface {
	ComputeMax(ctx context.Context, opts ...grpc.CallOption) (FindMaxService_ComputeMaxClient, error)
}

type findMaxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFindMaxServiceClient(cc grpc.ClientConnInterface) FindMaxServiceClient {
	return &findMaxServiceClient{cc}
}

func (c *findMaxServiceClient) ComputeMax(ctx context.Context, opts ...grpc.CallOption) (FindMaxService_ComputeMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FindMaxService_serviceDesc.Streams[0], "/findMax.FindMaxService/ComputeMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &findMaxServiceComputeMaxClient{stream}
	return x, nil
}

type FindMaxService_ComputeMaxClient interface {
	Send(*FindMaxRequest) error
	Recv() (*FindMaxResponse, error)
	grpc.ClientStream
}

type findMaxServiceComputeMaxClient struct {
	grpc.ClientStream
}

func (x *findMaxServiceComputeMaxClient) Send(m *FindMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *findMaxServiceComputeMaxClient) Recv() (*FindMaxResponse, error) {
	m := new(FindMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FindMaxServiceServer is the server API for FindMaxService service.
type FindMaxServiceServer interface {
	ComputeMax(FindMaxService_ComputeMaxServer) error
}

// UnimplementedFindMaxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFindMaxServiceServer struct {
}

func (*UnimplementedFindMaxServiceServer) ComputeMax(srv FindMaxService_ComputeMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeMax not implemented")
}

func RegisterFindMaxServiceServer(s *grpc.Server, srv FindMaxServiceServer) {
	s.RegisterService(&_FindMaxService_serviceDesc, srv)
}

func _FindMaxService_ComputeMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FindMaxServiceServer).ComputeMax(&findMaxServiceComputeMaxServer{stream})
}

type FindMaxService_ComputeMaxServer interface {
	Send(*FindMaxResponse) error
	Recv() (*FindMaxRequest, error)
	grpc.ServerStream
}

type findMaxServiceComputeMaxServer struct {
	grpc.ServerStream
}

func (x *findMaxServiceComputeMaxServer) Send(m *FindMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *findMaxServiceComputeMaxServer) Recv() (*FindMaxRequest, error) {
	m := new(FindMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FindMaxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "findMax.FindMaxService",
	HandlerType: (*FindMaxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ComputeMax",
			Handler:       _FindMaxService_ComputeMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "findMax.proto",
}
